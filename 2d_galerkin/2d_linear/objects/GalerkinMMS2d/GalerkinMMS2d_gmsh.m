classdef GalerkinMMS2d_gmsh < GalerkinMMS2d
% GalerkinMMS2d_gmsh implements an MMS test on meshes generated by gmsh
%   GalerkinMMS2d_gmsh is a subclass of GalerkinMMS2d that implements an
%   MMS test on meshes generated by gmsh. It is used to test the
%   GalerkinSolver2d class. The MMS test is a method of verifying the
%   accuracy of numerical methods by comparing the numerical solution to
%   an exact solution. The test is performed on a 2D domain with a
%   specified exact solution, and the results are compared to the exact
%   solution to assess the accuracy of the numerical method.
%

    properties
        domains     % cell array of Domain2d objects
    end

    methods
        function self = GalerkinMMS2d_gmsh(domRoot,auxfun,mmsparams)
            
            % call superclass constructor
            self@GalerkinMMS2d()

            if nargin > 0

                % store domains
                pmin = mmsparams.pmin;
                pmax = mmsparams.pmax;
                self.domains = self.generateDomains(domRoot,pmin,pmax);

				% store inputs
				self.auxFunctions = auxfun;
				self.errType = "L2";
				self.mmsParams = mmsparams;
				try, time = NameValueArgs.time; end

				% manufacture boundary conditions
				fprintf(' Setting BCs:'), tic
				self.domain = self.manufactureBoundaryConditions(dom,auxfun);
				executionTime = toc;
				fprintf(' %f s\n',executionTime)

				% if not in demo-mode, run MMS test
				if self.mmsParams.demo == 0

					% solve problems
					self.problems = self.solveManufacturedProblems;

					% compute errors
					[self.errors,self.ratios,self.orders] = self.computeErrors;

				% else, if in demo-mode, only run one trial
				else
					self.problems = self.solveManufacturedProblems;
				end
            end

        end

        function domains = generateDomains(self,root,pmin,pmax)
        % generateDomains generates a set of domains from .m files
        %   gmsh domains have been exported to .m files stored in the folder
        %   designated by root. This function builds the domain from the .m
        %   files and stores those domains as cell array called domains. The
        %   domains in root are indexed by refinement level, so this function
        %   stores from refinement level pmin to pmax. 
        %
        %   INPUTS:
        %       root: string, path to the folder containing the .m files
        %       pmin: integer, minimum refinement level
        %       pmax: integer, maximum refinement level
        %   OUTPUTS:
        %       domains: cell array of Domain2d objects

            % check if root is a valid directory
            if ~isfolder(root)
                error('Root directory does not exist');
            end

            % check if pmin and pmax are valid integers
            if ~isnumeric(pmin) || ~isnumeric(pmax) || pmin > pmax
                error('pmin and pmax must be integers with pmin <= pmax');
            end

            % initialize domains cell array
            domains = cell(1, pmax - pmin + 1);

            % loop through refinement levels
            for i = pmin:pmax
                % generate domain from .m file
                filename = fullfile(root, sprintf('mesh%d.m', i));
                if ~isfile(filename)
                    error('Mesh file does not exist: %s', filename);
                end

                % load mesh file
                run(filename);
                try 
                    % try to load mesh
                    dom_p = Domain2d.domainFromGmsh(msh);
                catch
                    % on error, try to reverse the orientation of triangles
                    msh.TRIANGLES = msh.TRIANGLES(:,[1,3,2,4]);
                    dom_p = Domain2d.domainFromGmsh(msh);
                end

                domains{i - pmin + 1} = dom_p;

            end
        
        end
    end
end
